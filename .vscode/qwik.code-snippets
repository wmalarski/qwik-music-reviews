{
	"Qwik component (simple)": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q:component",
		"description": "Simple Qwik component",
		"body": [
			"export const ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}} = component$(() => {",
			"  return <${2:div}>$4</$2>",
			"});"
		]
	},
	"Qwik component (props)": {
		"scope": "typescriptreact",
		"prefix": "q:component w/props",
		"description": "Qwik component w/ props",
		"body": [
			"export interface ${1:${TM_FILENAME_BASE/(.*)/${1:/pascalcase}/}}Props {",
			"  $2",
			"}",
			"",
			"export const $1 = component$<$1Props>((props) => {",
			"  const ${2:count} = useSignal(0);",
			"  return (",
			"    <${3:div} on${4:Click}$={(ev) => {$5}}>",
			"      $6",
			"    </${3}>",
			"  );",
			"});"
		]
	},
	"Qwik signal": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q:useSignal",
		"description": "useSignal() declaration",
		"body": [
			"const ${1:foo} = useSignal($2);",
			"$0"
		]
	},
	"Qwik store": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q:useStore",
		"description": "useStore() declaration",
		"body": [
			"const ${1:state} = useStore({",
			"  $2",
			"});",
			"$0"
		]
	},
	"$ hook": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q:$",
		"description": "$() function hook",
		"body": [
			"$(() => {",
			"  $0",
			"});",
			""
		]
	},
	"useClientEffect": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q:useClientEffect",
		"description": "useClientEffect$() function hook",
		"body": [
			"useClientEffect$(({ track }) => {",
			"  $0",
			"});",
			""
		]
	},
	"useWatch": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q:useWatch",
		"description": "useWatch$() function hook",
		"body": [
			"useWatch$(({ track }) => {",
			"  track(() => $1);",
			"  $0",
			"});",
			""
		]
	},
	"useResource": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q:useResource",
		"description": "useResource$() declaration",
		"body": [
			"const $1 = useResource$(({ track, cleanup }) => {",
			"  $0",
			"});",
			""
		]
	},
	"useServerMount": {
		"scope": "javascriptreact,typescriptreact",
		"prefix": "q:useServerMount",
		"description": "useServerMount$() function hook",
		"body": [
			"useServerMount$(() => {",
			"  $0",
			"});",
			""
		]
	}
}