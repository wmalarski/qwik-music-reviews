// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Artist {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  name      String
  sid       String?
  userId    String
  albums    Album[]

  @@index([userId])
}

model Album {
  id        String   @id @default(uuid())
  artist    Artist   @relation(fields: [artistId], references: [id])
  artistId  String
  createdAt DateTime @default(now())
  sid       String?
  title     String
  userId    String
  year      Int
  reviews   Review[]
  visits    Visit[]
  release   String?
  covers    String?

  @@index([userId])
}

model Review {
  id        String   @id @default(uuid())
  album     Album    @relation(fields: [albumId], references: [id])
  albumId   String
  createdAt DateTime @default(now())
  rate      Float
  text      String
  userId    String

  @@index([userId])
}

model Visit {
  id        String   @id @default(uuid())
  albumId   String
  album     Album    @relation(fields: [albumId], references: [id])
  createdAt DateTime @default(now())
  userId    String

  @@index([userId])
}

// next-auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
